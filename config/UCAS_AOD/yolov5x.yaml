# parameters
nc: 2  # number of classes
depth_multiple: 1.33  # model depth multiple  Control Bottleneck numbers in BottleneckCSP layer
width_multiple: 1.25  # layer channel multiple  Control kernels number

# anchors
anchors:
  - [10,13, 16,30, 33,23]  # P3/8 w,h
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32

# YOLOv5 backbone
backbone:
  # [from, number, module, args]
  # from : -1 - front layers output    -2 - front front layers output
  # number : module repeat number
  # module : function module in common.py
  # args : input parameter of function module
  [[-1, 1, Focus, [64, 3]],  # 0-P1/2                         Focus(3, 64, 1, 1)
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4                      Conv(-1(64) , 128, 3, 2)
   [-1, 3, BottleneckCSP, [128]],    #                        BottleneckCSP(-1(128), 128)×3
   [-1, 1, Conv, [256, 3, 2]],  #                             Conv(-1(128) , 256, 3, 2)
   [-1, 9, BottleneckCSP, [256]], # 4-P3/8                    BottleneckCSP(-1(256), 256)×9
   [-1, 1, Conv, [512, 3, 2]],  #                             Conv(-1(256) , 512, 3, 2)
   [-1, 9, BottleneckCSP, [512]],  # 6-P4/16                  BottleneckCSP(-1(512), 512)×9
   [-1, 1, Conv, [1024, 3, 2]],  #                            Conv(-1(512) , 1024, 3, 2)
   [-1, 1, SPP, [1024, [5, 9, 13]]],    #  8                  SPP(-1(1024), 1024, [5,9,13])
   [-1, 3, BottleneckCSP, [1024, False]],  # 9-P5/32          BottleneckCSP(-1(1024), 1024, shorcut=False)×3
  ]

# YOLOv5 head           torch.nn.Upsample(in_size=None, scale_factor=None, mode='nearest', align_corners=None)
head:
  [[-1, 1, Conv, [512, 1, 1]],                    # Conv(-1(1024) , 512, 1, 1)              out_size = 1/32     10-head P5
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],    # Upsample(-1(1/32), 2)                   out_size = 1/16
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4          out_channels = 512 + 512 = 1024   out_size = 1/16
   [-1, 3, BottleneckCSP, [512, False]],  # 13      BottleneckCSP(-1(1024), 512)×3          out_size = 1/16

   [-1, 1, Conv, [256, 1, 1]],                    # Conv(-1(512) , 256, 1, 1)               out_size = 1/16     14-head P4
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],    # Upsample(-1(1/16), 2)                   out_size = 1/8
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3          out_channels = 256 + 256 = 512    out_size = 1/8
   [-1, 3, BottleneckCSP, [256, False]],  # 17              BottleneckCSP(-1(512), 256)×3   out_size = 1/8      17-(P3/8-small)

   [-1, 1, Conv, [256, 3, 2]],                    # Conv(-1(256) , 256, 3, 2)               out_size = 1/16
   [[-1, 14], 1, Concat, [1]],  # cat head P4             out_channels = 256 + 256 = 512    out_size = 1/16
   [-1, 3, BottleneckCSP, [512, False]],  # 20               BottleneckCSP(-1(512), 512)×3  out_size = 1/16     20-(P4/16-medium)

   [-1, 1, Conv, [512, 3, 2]],                    # Conv(-1(512) , 512, 3, 2)               out_size = 1/32
   [[-1, 10], 1, Concat, [1]],  # cat head P5             out_channels = 512 + 512 = 512    out_size = 1/32
   [-1, 3, BottleneckCSP, [1024, False]],  # 23             BottleneckCSP(-1(512), 1024)×3  out_size = 1/32     23-(P5/32-large)

   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
